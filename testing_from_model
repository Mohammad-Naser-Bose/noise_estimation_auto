import matplotlib.pyplot as plt
import numpy as np
import torch
import pickle
import torch.nn as nn
from torch.utils.data import DataLoader, TensorDataset, Dataset
import splitting_normalization
class CNN_LSTM(nn.Module):
    def __init__(self):
        super(CNN_LSTM, self).__init__()
        self.conv1 = nn.Conv1d(in_channels=2, out_channels=8, kernel_size=3, stride=3, padding=1, dilation=1)
        self.conv2 = nn.Conv1d(in_channels=8, out_channels=32, kernel_size=3, stride=3, padding=1, dilation=1)
        self.conv3 = nn.Conv1d(in_channels=32, out_channels=64, kernel_size=3, stride=3, padding=1, dilation=1)    
        self.bn1 = nn.BatchNorm1d(8)

        self.dropout1 = nn.Dropout(0.3)

        self.pool = nn.MaxPool1d(kernel_size=2, stride=2, padding=0)
        self.relu = nn.ReLU()
        self.flattened_size= self._get_flattened_size()
        self.lstm = nn.LSTM(input_size=64, hidden_size=64, num_layers=1,batch_first=True)
        self.fc1 = nn.Linear(3264,1024)
        self.fc2 = nn.Linear(1024,64) 
        self.fc3 = nn.Linear(64,1)        
        
    def _get_flattened_size(self):
        x = torch.zeros(1,2,window_len_sample_downsampled) 
        x = self.relu(self.bn1(self.conv1(x)))
        x = self.relu(self.conv2(x))
        x = self.pool(self.relu(self.conv3(x)))
        return x.numel()

    def forward(self,x):
        x = self.relu(self.conv1(x))#; x = self.bn1()
        x = self.relu(self.conv2(x))
        x = self.pool(self.relu(self.conv3(x)))
        x = self.dropout1(x)
        
        x=x.permute(0,2,1)
        x,_ = self.lstm(x)

        x_reshaped = x.reshape(x.size(0),-1)
        x = self.relu(self.fc1(x_reshaped))
        x = self.relu(self.fc2(x))
        x = self.fc3(x)
        return x
class CustomDataset(Dataset):
    def __init__(self,inputs,labels):
        self.inputs = inputs
        self.labels = labels
    def __len__(self):
        return(len(self.inputs))
    def __getitem__(self, idx):
        input_data = self.inputs[idx]
        label = self.labels[idx]
        return input_data, label
def plotting_testing(test_preds, test_labels):
    test_label_db = 20*np.log10(np.array(test_labels)/1)
    test_pred_db = 20*np.log10(np.array(test_preds)/1)
    plt.figure(figsize=(10,5))
    plt.plot(test_label_db[:100], marker = "o", label = "True values (Testing)")
    plt.plot(test_pred_db[:100], marker = "o", label = "Predicted values (Testing)")
    plt.xlabel("Sample")
    plt.ylabel("Noise RMS [dB]")
    plt.legend()
    plt.savefig("Testing1.png")  
    
    err_test_db = 20*np.log10((np.array(test_labels) -np.array(test_preds))**2)/(np.array(test_labels)**2)
    err_avg_test_db = np.mean(err_test_db)
    plt.figure(figsize=(10,5))
    plt.plot(err_test_db[:100], marker = "o", label = "Predicted values (testing)")
    plt.axhline(y=err_avg_test_db,color="orange", linestyle="--", label="Avg")
    plt.xlabel("Sample")
    plt.ylabel("Error for Noise RMS [dB]")
    plt.legend()
    plt.savefig("Testing2.png") 
    print("Test error is:", err_avg_test_db)
    return 
def run_ML_testing(model, test_inputs, test_labels):
    dataset_test= CustomDataset(test_inputs,test_labels)
    dataloader_test = DataLoader(dataset_test,batch_size=batch_size, shuffle=False)
    
    model = my_ML_model 
    model = model.to(device)
    model.eval()

    test_preds = []
    test_labels_all = []

    with torch.no_grad():
        for test_inputs, test_labels in dataloader_test:
            test_inputs = test_inputs.to(device).to(torch.float32)
            test_labels = test_labels.to(device).to(torch.float32)

            test_outputs = model(test_inputs)

            print(test_labels)
            print(test_outputs)
            print("------")

            test_preds.extend(test_outputs.detach().cpu().numpy().flatten())
            test_labels_all.extend(test_labels.detach().cpu().numpy().flatten())

    plotting_testing(test_preds, test_labels_all)
    return 



###############
###############
###############
window_len_sample_downsampled = 2760
ML_type = "CNN_LSTM"
batch_size = 1
num_epochs = 25
device = "cuda"

with open("Model.pkl", "rb") as file:
    best_model = pickle.load(file)

if ML_type == "CNN_LSTM":
    my_ML_model = CNN_LSTM()   
run_ML_testing(best_model, splitting_normalization.data_test_xy, splitting_normalization.test_z_norm)

stop =1